=======> Promise.all()
The Promise.all() static method takes an iterable of promises as input and returns a single Promise. 
This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. 
It rejects when any of the input's promises rejects, with this first rejection reason.

For Eg.
const promise1 = Promise.resolve(3);
const promise2 = 42;
const promise3 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'foo');
});

Promise.all([promise1, promise2, promise3]).then((values) => {
  console.log(values);
});

// Expected output: Array [3, 42, "foo"]


=======> Promise.allSettled()
The Promise.allSettled() static method takes an iterable of promises as input and returns a single Promise.

For Eg.
const promise1 = Promise.resolve(3);
const promise2 = new Promise((resolve, reject) =>
  setTimeout(reject, 100, 'foo'),
);
const promise3 = Promise.reject();
const promises = [promise1, promise2, promise3];

Promise.allSettled(promises).then((results) =>
  results.forEach((result) => console.log(result.status)),
);

// Expected Output
> "fulfilled"
> "rejected"
> "rejected"


=======> Promise.any()
The Promise.any() static method takes an iterable of promises as input and returns a single Promise. 
This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. 
It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons.

For Eg.
const promise1 = Promise.reject(0);
const promise2 = new Promise((resolve) => setTimeout(resolve, 100, 'quick'));
const promise3 = new Promise((resolve) => setTimeout(resolve, 500, 'slow'));

const promises = [promise1, promise2, promise3];
Promise.any(promises).then((value) => console.log(value));

// Expected output: "quick"


=======> Promise.race()
The Promise.race() static method takes an iterable of promises as input and returns a single Promise. 
This returned promise settles with the eventual state of the first promise that settles.

For Eg.
const promise1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 5000, 'one');
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 3000, 'two');
});
const promise3 = new Promise((resolve, reject) => {
  setTimeout(resolve, 1000, 'three');
});

Promise.race([promise1, promise2, promise3]).then((value) => {
  console.log(value);
  // Both resolve, but promise3 is faster
});

// Expected output: "three"

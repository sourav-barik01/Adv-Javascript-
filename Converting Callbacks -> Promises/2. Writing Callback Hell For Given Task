function download(url, cb){
    console.log("Starting to Download Data From", url);
    setTimeout(function down(){
        console.log("Download Complete");
        const content = "axbycz";
        cb(content);                    // If this is not called; or you actually don't know how many times it will be called, is known as Inversion Of Control
    }, 5000);
}

function writeFile(data, cb){
    console.log("Started Writing File w/", data);
    setTimeout(function write(){
        console.log("Completed Writing Data in the File");
        const filename = "file.txt";
        cb(filename);
    }, 7000);
}

function upload(url, file, cb){
    console.log("Started Uploading", file, "on", url);
    setTimeout(function up(){
        console.log("Upload Complete");
        const response = "Success!!";
        cb(response);
    }, 9000);
}

download("www.xyz.com", function processDownload(content){                    // Callback Hell is taking place as you can clearly see the code implementation is fine only problem is with readability
    console.log("We are now Going to Process the Downloaded Data");
    writeFile(content, function processWrite(filename){
        console.log("We have written the file in the downloaded data");
        upload("www.upload.com", filename, function processUpload(response){
            console.log("We have Uploaded the file", response);
        });
    });
});




// Output :
Starting to Download Data From www.xyz.com
Download Complete
We are now Going to Process the Downloaded Data
Started Writing File w/ axbycz
Completed Writing Data in the File
We have written the file in the downloaded data
Started Uploading file.txt on www.upload.com
Upload Complete
We have Uploaded the file Success!!

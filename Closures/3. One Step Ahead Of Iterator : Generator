While custom iterators are a useful tool, their creation requires careful programming due to the need to explicitly maintain their internal state. 
Generator functions provide a powerful alternative: they allow you to define an iterative algorithm by writing a single function whose execution is not continuous.
Generator functions are written using the function* syntax.

Yield Keyword :
When called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a Generator. 
When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.
The function can be called as many times as desired, and returns a new Generator each time. Each Generator may only be iterated once.


Consider this example :-
---------------------
function* makeRangeIterator(start = 0, end = 5, step = 1) {
  let iterationCount = 0;
  for (let i = start; i < end; i += step) {
    iterationCount++;
    console.log("The iterationCount is", iterationCount);
    yield i;
  }
}

const iter = makeRangeIterator();        // This doesn't means the function is run. Here, the function is executed line by line using iter.next()
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());


// Output :
The iterationCount is 1
{ value: 0, done: false }
The iterationCount is 2
{ value: 1, done: false }
The iterationCount is 3
{ value: 2, done: false }
The iterationCount is 4
{ value: 3, done: false }
The iterationCount is 5
{ value: 4, done: false }
{ value: undefined, done: true }
